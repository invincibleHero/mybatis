<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="test">

    <!-- 在配置文件中，配置很多sql -->

    <!-- 根据用户id 查询用户信息-->
    <select id="findUserById" parameterType="int" resultType="com.lpf.ssm.mybatis.po.User">

    <!--
    SELECT id, username,sex,birthday, address FROM USER WHERE id = #{id}
-->

        <!-- 为什么通过下面的sql 查询出来的日期为 null-->
        SELECT id, username,sex,DATE_FORMAT(birthday,'%m-%d-%Y') , address FROM USER WHERE id = #{id}

    </select>

    <!--根据用户名称模糊查询用户信息，可能返回多条-->
    <select id="findUserByName" parameterType="java.lang.String" resultType="com.lpf.ssm.mybatis.po.User">
        select id,username, sex, birthday,address from User where username like '%${value}%'
    </select>


    <!--添加用户-->
    <insert id="insertUser" parameterType="com.lpf.ssm.mybatis.po.User">
        insert into user (username,birthday, sex,address) value (#{username}, #{birthday},#{sex},#{address})
    </insert>




    <!--添加用户，自增组件返回-->

    <!--
        parameterType： 指定输入参数类型是pojo（包括用户信息）
        #{} 中指定pojo中的属性名， 接收到 pojo 对象的属性值，mybatis 通过 ognl 获取对象的属性值。
    -->
    <insert id="insertUsetWithAutoId" parameterType="com.lpf.ssm.mybatis.po.User" >
        <!--
            将插入数据的主键返回，返回到user 对象中
            Select LAST_INSERTID(): 得到刚刚insert 进去记录的主键值，只是用于 自增主键
            keyProperty： 将查询到主键值设置到 parameterType 指定对象的那个属性
            order：select LAST_INSERT_ID()  执行顺序，相对于insert 语句来说它的执行顺序
            resultType ： 指定 select LAST_INSERT_ID() 的结果类型
        -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>

        <!--
        INSERT INTO USER( username,birthday,sex,address) VALUE (${username},${birthday},${sex}, ${address})
        -->
        insert into user (username,birthday, sex,address) value (#{username}, #{birthday},#{sex},#{address})
    </insert>


    <!--  非自增主键返回，使用uuid()
        使用 mysql 的 uuid()  函数生成主键，需要修改表格中id字段为Stirng，长度设置为35位
    -->
    <insert id="insetWithUUID" parameterType="com.lpf.ssm.mybatis.po.User">
        <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
            SELECT uuid()
        </selectKey>
        insert into user(username, birthday,sex,address) value (#{username},#{birthday},#{sex},#{address})
    </insert>

    <!--
        通过oracle的序列生成主键：

            <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
			SELECT 序列名.nextval()
		</selectKey>
		insert into user(id,username,birthday,sex,address) value(#{id},#{username},#{birthday},#{sex},#{address})

    -->


    <!--
        删除用户
        根据id 删除用户，需要输入id值
    -->
    <delete id="deleteUser" parameterType="java.lang.Integer" >
        DELETE FROM USER WHERE id=#{id}
    </delete>


    <!--
    根据 用户 id 更新用户
    分析：
        需要传入用户的id
        需要传入用户的更新信息，
        ParameterType指定user对象， 包括id 和更新信息，注意，id必须存在
    #{id}： 从输入user 对象中获取id属性值-->
    <update id="updateUser" parameterType="com.lpf.ssm.mybatis.po.User">
        update user set username =#{username} , birthday=#{birthday} ,sex=#{sex} where id=#{id}
    </update>

</mapper>
















